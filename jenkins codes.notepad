{"bgColorIndex":0,"textColorIndex":1,"note":"Sample commands:\nInstall the latest LTS version: brew install jenkins-lts\nStart the Jenkins service: brew services start jenkins-lts\nRestart the Jenkins service: brew services restart jenkins-lts\nUpdate the Jenkins version: brew upgrade jenkins-lts\n\n\nAfter starting the Jenkins service, browse to http:\/\/localhost:8080 and follow the instructions to complete the installation.\n\n\n\npipeline syntax link ==>>> https:\/\/www.jenkins.io\/doc\/book\/pipeline\/syntax\/\n\n\nSupported Tools\n\n\nmaven\njdk\ngradle\n\n\nExample 13. Tools, Declarative Pipeline\n\n\npipeline {\n    agent any\n    tools {\n        maven 'apache-maven-3.0.1' \n    }\n    stages {\n        stage('Example') {\n            steps {\n                sh 'mvn --version'\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\nfILES matching an inclusion pattern\n\n files matching the inclusion pattern ==>> (**\/target\/*.xml).\n\n\n\nusing jenkins file link ==>> https:\/\/www.jenkins.io\/doc\/book\/pipeline\/jenkinsfile\/\n\n\n\nSecret text\nThe following Pipeline code shows an example of how to create a Pipeline using environment variables for secret text credentials.\n\nIn this example, two secret text credentials are assigned to separate environment variables to access Amazon Web Services (AWS). These credentials would have been configured in Jenkins with their respective credential IDs\njenkins-aws-secret-key-id and jenkins-aws-secret-access-key.\n\nJenkinsfile (Declarative Pipeline)\npipeline {\n    agent {\n        \/\/ Define agent details here\n    }\n    environment {\n        AWS_ACCESS_KEY_ID     = credentials('jenkins-aws-secret-key-id')\n        AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws-secret-access-key')\n    }\n    stages {\n        stage('Example stage 1') {\n            steps {\n                \/\/ \n            }\n        }\n        stage('Example stage 2') {\n            steps {\n                \/\/ \n            }\n        }\n    }\n}\n\nSecret files\nA secret file is a credential which is stored in a file and uploaded to Jenkins. Secret files are used for credentials that are:\n\ntoo unwieldy to enter directly into Jenkins, and\/or\nin binary format, such as a GPG file.\nIn this example, we use a Kubernetes config file that has been configured as a secret file credential named my-kubeconfig.\n\nJenkinsfile (Declarative Pipeline)\npipeline {\n    agent {\n        \/\/ Define agent details here\n    }\n    environment {\n        \/\/ The MY_KUBECONFIG environment variable will be assigned\n        \/\/ the value of a temporary file.  For example:\n        \/\/   \/home\/user\/.jenkins\/workspace\/cred_test@tmp\/secretFiles\/546a5cf3-9b56-4165-a0fd-19e2afe6b31f\/kubeconfig.txt\n        MY_KUBECONFIG = credentials('my-kubeconfig')\n    }\n    stages {\n        stage('Example stage 1') {\n            steps {\n                sh(\"kubectl --kubeconfig $MY_KUBECONFIG get pods\")\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}